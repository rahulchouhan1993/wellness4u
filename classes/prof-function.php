<?phpclass Profclass extends frontclass{      public function isLoggedInPro()    {                        $return = false;            if( isset($_SESSION['pro_user_id']) && ($_SESSION['pro_user_id'] > 0) && ($_SESSION['pro_user_id'] != '') )            {                    $return = $this->chkValidProUserId($_SESSION['pro_user_id']);	            }            return $return;    }        public function chkValidProUserId($pro_user_id)    {            $DBH = new DatabaseHandler();            $return = false;            $sql = "SELECT * FROM `tbl_profusers` WHERE `pro_user_id` = '".$pro_user_id."' AND `status` = '1'";            $STH = $DBH->query($sql);            if($STH->rowCount() > 0)            {                    $return = true;            }            return $return;    }    function doUpdateOnlinePro($pro_user_id){	$DBH = new DatabaseHandler();	$now = time();	$return = false;		if($pro_user_id > 0)	{            $sql = "UPDATE `tblprofusers` SET `online_timestamp` = '".$now."' WHERE `pro_user_id` = '".$pro_user_id."'";            $STH = $DBH->query($sql);            if($STH->rowCount() > 0)            {                $return = true;	            }	}		return $return;}public function getvendoraccesdropdownmain($cat_id)	{		$DBH = new DatabaseHandler();		$output = '';		$output .= '<option value="" >Select Category</option>';			try {				//$sql = "SELECT cat_id,cat_name FROM `tblcategories` WHERE `parent_cat_id` = '".$parent_cat_id."' AND `cat_deleted` = '0' ORDER BY cat_name ASC";					//$sql = "SELECT fav_cat_id,fav_cat FROM `tblfavcategory` WHERE 1 ORDER BY fav_cat ASC";					$sql = "SELECT * FROM `tblvendoraccess` "                                     . "LEFT JOIN tblprofilecustomcategories ON tblvendoraccess.va_cat_id = tblprofilecustomcategories.prct_cat_id WHERE tblprofilecustomcategories.prct_cat_status = 1 and tblprofilecustomcategories.prct_cat_deleted = 0 and tblvendoraccess.va_deleted=0 and tblvendoraccess.va_status = 1 GROUP BY tblvendoraccess.va_cat_id ORDER BY tblprofilecustomcategories.prct_cat ASC";                                $STH = $DBH->query($sql);				if( $STH->rowCount() > 0 )				{					while($r= $STH->fetch(PDO::FETCH_ASSOC))					{						                                            if($r['prct_cat_id'] == $cat_id )                                            {                                                    $selected = ' selected ';	                                            }                                            else                                            {                                                    $selected = '';	                                            }																			$output .= '<option value="'.$r['prct_cat_id'].'" '.$selected.'>'.stripslashes($r['prct_cat']).'</option>';					}				}			} catch (Exception $e) {				//$stringData = '[getMainCategoryOption] Catch Error:'.$e->getMessage().' , sql:'.$sql;				//$this->debuglog($stringData);				return $output;			}						return $output;	}                public function getvendoraccesdropdownsub($va_cat_id,$va_sub_cat_id)	{		$DBH = new DatabaseHandler();		$output = '';		$output .= '<option value="" >Select Category</option>';			try {				//$sql = "SELECT cat_id,cat_name FROM `tblcategories` WHERE `parent_cat_id` = '".$parent_cat_id."' AND `cat_deleted` = '0' ORDER BY cat_name ASC";					//$sql = "SELECT fav_cat_id,fav_cat FROM `tblfavcategory` WHERE 1 ORDER BY fav_cat ASC";					$sql = "SELECT * FROM `tblvendoraccess` "                                     . "LEFT JOIN tblfavcategory ON tblvendoraccess.va_sub_cat_id = tblfavcategory.fav_cat_id WHERE tblfavcategory.fav_cat_status = 1 and tblfavcategory.fav_cat_deleted = 0 and tblvendoraccess.va_deleted=0 and tblvendoraccess.va_status = 1 and tblvendoraccess.va_cat_id = '".$va_cat_id."' GROUP BY tblvendoraccess.va_sub_cat_id ORDER BY tblfavcategory.fav_cat ASC";                                $STH = $DBH->query($sql);				if( $STH->rowCount() > 0 )				{					while($r= $STH->fetch(PDO::FETCH_ASSOC))					{						                                            if($r['fav_cat_id'] == $va_sub_cat_id )                                            {                                                    $selected = ' selected ';	                                            }                                            else                                            {                                                    $selected = '';	                                            }																			$output .= '<option value="'.$r['fav_cat_id'].'" '.$selected.'>'.stripslashes($r['fav_cat']).'</option>';					}				}			} catch (Exception $e) {				//$stringData = '[getMainCategoryOption] Catch Error:'.$e->getMessage().' , sql:'.$sql;				//$this->debuglog($stringData);				return $output;			}						return $output;	}         public function getVAIDFromVACATID($va_cat_id,$va_sub_cat_id)    {        $DBH = new DatabaseHandler();        $va_id = 0;        $sql = "SELECT va_id FROM `tblvendoraccess` WHERE `va_cat_id` = '".$va_cat_id."' AND `va_sub_cat_id` = '".$va_sub_cat_id."' AND `va_status` = '1' AND `va_deleted` = '0' ";        $STH = $DBH->query($sql);        if($STH->rowCount() > 0)		{            $r = $STH->fetch(PDO::FETCH_ASSOC);            $va_id = $r['va_id'];        }        return $va_id;    }        public function chkValidVendorLogin($username,$password)    {        $DBH = new DatabaseHandler();        $return = false;        try {			// $sql = "SELECT * FROM `tblvendors` WHERE (`vendor_username` = '".addslashes($username)."' OR `vendor_email` = '".addslashes($username)."' OR `vendor_mobile` ='".addslashes($username)."' ) AND `vendor_password` = '".md5($password)."' AND `vendor_status` = '1' AND `vendor_deleted` = '0' ";			//update 14-07-20 remove username        	$sql = "SELECT * FROM `tblvendors` WHERE (`vendor_email` = '".addslashes($username)."' OR `vendor_mobile` ='".addslashes($username)."' ) AND `vendor_password` = '".md5($password)."' AND `vendor_status` = '1' AND `vendor_deleted` = '0' ";			//$this->debuglog('[chkValidVendorLogin] sql: '.$sql);				$STH = $DBH->query($sql);			if( $STH->rowCount() > 0 )			{				$return = true;				}		} catch (Exception $e) {			$stringData = '[chkValidVendorLogin] Catch Error:'.$e->getMessage().' , sql:'.$sql;			$this->debuglog($stringData);            return false;        }        return $return;    }public function doVendorLogin($username)    {        global $link;        $return = false;        $vendor_id = $this->getVendorId($username);        $vendor_name = $this->getVendorNameByUsername($username);        $vendor_email = $this->getVendorEmail($username);                if($vendor_id > 0)        {            $return = true;	            $_SESSION['adm_vendor_id'] = $vendor_id;            $_SESSION['adm_vendor_username'] = $username;             $_SESSION['adm_vendor_name'] = $vendor_name;            $_SESSION['adm_vendor_email'] = $vendor_email;        }	        return $return;    }        public function getVendorId($username)    {        $DBH = new DatabaseHandler();        $vendor_id = 0;		try {			$sql = "SELECT * FROM `tblvendors` WHERE (`vendor_username` = '".addslashes($username)."' OR `vendor_email` = '".addslashes($username)."' OR `vendor_mobile` = '".addslashes($username)."') AND `vendor_deleted` = '0' ";			$STH = $DBH->query($sql);			if($STH->rowCount() > 0)			{				$r = $STH->fetch(PDO::FETCH_ASSOC);				$vendor_id = $r['vendor_id'];			}		} catch (Exception $e) {			$stringData = '[getVendorId] Catch Error:'.$e->getMessage().' , sql:'.$sql;			$this->debuglog($stringData);            return 0;        }		        return $vendor_id;    }    public function getVendorNameByUsername($username)    {        $DBH = new DatabaseHandler();        $fname = '';		try {			$sql = "SELECT * FROM `tblvendors` WHERE (`vendor_username` = '".addslashes($username)."' OR `vendor_email` = '".addslashes($username)."' OR `vendor_mobile` = '".addslashes($username)."') AND `vendor_deleted` = '0' ";			$STH = $DBH->query($sql);			if($STH->rowCount() > 0)			{				$r = $STH->fetch(PDO::FETCH_ASSOC);				$fname = stripslashes($r['vendor_name']);			}		} catch (Exception $e) {			$stringData = '[getVendorNameByUsername] Catch Error:'.$e->getMessage().' , sql:'.$sql;			$this->debuglog($stringData);            return $fname;        }		        return $fname;    }	    public function getVendorEmail($username)    {        $DBH = new DatabaseHandler();        $email = '';		try {			$sql = "SELECT * FROM `tblvendors` WHERE (`vendor_username` = '".addslashes($username)."' OR `vendor_email` = '".addslashes($username)."' OR `vendor_mobile` = '".addslashes($username)."') AND `vendor_deleted` = '0' ";			$STH = $DBH->query($sql);			if($STH->rowCount() > 0)			{				$r = $STH->fetch(PDO::FETCH_ASSOC);				$email = stripslashes($r['vendor_email']);			}		} catch (Exception $e) {			$stringData = '[getVendorEmail] Catch Error:'.$e->getMessage().' , sql:'.$sql;			$this->debuglog($stringData);            return $email;        }		        return $email;    }    public function chkProEmailExists($email){	$DBH = new DatabaseHandler();	$return = false;		$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".$email."'";	$STH = $DBH->query($sql);        if($STH->rowCount() > 0)        {		$return = true;	}	return $return;}public function reSendProfOTP($tdata)    {        $my_DBH = new DatabaseHandler();        $DBH = $my_DBH->raw_handle();        $DBH->beginTransaction();        $return = false;				try {			$sql = "UPDATE `tblvendors` SET 					`vendor_otp` = :vendor_otp					 WHERE `vendor_email` = :vendor_email  ";			$STH = $DBH->prepare($sql);			$STH->execute(array(				':vendor_otp' => addslashes($tdata['otp']),				':vendor_email' => addslashes($tdata['email'])			));			$DBH->commit();			$return = true;		} catch (Exception $e) {						return false;		}			        return $return;    }        public function sendSMS($tdata) {        $user= SMS_USERNAME;        $password = SMS_PASSWORD;        $msisdn = $tdata['mobile_no'];        // $otp = $tdata['otp'];        $sid = 'AIMSEL';        $msg = urlencode($tdata['sms_message']);        $url = "http://smpp.keepintouch.co.in/vendorsms/pushsms.aspx";        $parameters = "user=$user&password=$password&msisdn=$msisdn&sid=$sid&msg=$msg&fl=0&gwid=2";        $ch = curl_init($url);        curl_setopt($ch, CURLOPT_POST,1);        curl_setopt($ch, CURLOPT_POSTFIELDS,$parameters);        curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);         curl_setopt($ch, CURLOPT_HEADER,0);  // DO NOT RETURN HTTP HEADERS         curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);  // RETURN THE CONTENTS OF THE CALL        $return_val = curl_exec($ch);        // echo "<pre>";print_r($return_val);echo "</pre>";        if($return_val=="")        {         $string = "Process Failed, Please check your connecting domain, username or password.$return_val".curl_error($ch);           //$this->debuglog($string);        }	else        {         	 $string = "Message Id : $return_val".curl_error($ch); //Returning the message id  :  Whenever you are sending an SMS our system will give a message id for each numbers, which can be saved into your database and in future by calling these message id's using correct API's you can update the delivery status.                 //$this->debuglog($string); // echo "<pre>";print_r($string);echo "</pre>";        	 // exit;         return true;           }        return true;       }        //  public function sendProfSMS($tdata)  //   {  //       $return = false;  //       $vendor_id = $this->getVendorIdBymail($tdata['email']);  //       $tdata['mobile_no'] = $this->getVendorContactNumber($vendor_id);  //       $sendurl = SMS_URL."sendsms/sendsms.php?username=".SMS_USERNAME."&password=".SMS_PASSWORD."&type=TEXT&sender=".SMS_SENDERID."&mobile=".$tdata['mobile_no']."&message=".urlencode($tdata['sms_message']);  //       //$this->debuglogsms('[sendSMS] sendurl:'.$sendurl);  //       try {					// 	$ch = curl_init($sendurl);		// 	curl_setopt($ch,CURLOPT_FRESH_CONNECT,TRUE);		// 	curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,FALSE);		// 	curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,FALSE);		// 	curl_setopt($ch,CURLOPT_HEADER, 0);		// 	curl_setopt ($ch, CURLOPT_URL, $sendurl);		// 	curl_setopt ($ch, CURLOPT_TIMEOUT, 120);		// 	curl_setopt($ch,CURLOPT_RETURNTRANSFER, TRUE);  		// 	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);		// 	if ( ! $response = curl_exec($ch) )		// 	{		// 		$stringData = '[sendSMS] Error:'.curl_error($ch).' , sendurl:'.$sendurl.', response:'.$response;		// 		////$this->debuglogsms($stringData);		// 	}		// 	curl_close ($ch);								// 	////$response = file_get_contents($sendurl);				// 	////$this->debuglogsms('[sendSMS] sendurl:'.$sendurl.', response:'.$response);		// 	return true;		// } catch (Exception $e) {		// 	$stringData = '[sendSMS] Catch Error:'.$e->getMessage().' , sendurl:'.$sendurl.', response:'.$response;		// 	////$this->debuglogsms($stringData);  //           return $return;  //       }		  //       return $return;  //   }    public function getVendorContactNumber($vendor_id)    {        $DBH = new DatabaseHandler();        $contact_number = '';                $sql = "SELECT contact_number FROM `tblvendorlocations` WHERE `vendor_id` = '".$vendor_id."' AND `vloc_default` = '1' AND `vloc_deleted` = '0' ";        $STH = $DBH->query($sql);        if($STH->rowCount() > 0)		{            $r = $STH->fetch(PDO::FETCH_ASSOC);            $contact_number = stripslashes($r['contact_number']);        }	        return $contact_number;    }         public function getVendorIdBymail($email)    {        $DBH = new DatabaseHandler();        $vendor_id = 0;		try {			$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".addslashes($email)."' AND `vendor_deleted` = '0' ";			$STH = $DBH->query($sql);			if($STH->rowCount() > 0)			{				$r = $STH->fetch(PDO::FETCH_ASSOC);				$vendor_id = $r['vendor_id'];			}		} catch (Exception $e) {			$stringData = '[getVendorId] Catch Error:'.$e->getMessage().' , sql:'.$sql;			            return 0;        }		        return $vendor_id;    }        public function VerifyOTP($data)    {        $DBH = new DatabaseHandler();        $return = false;		try {			$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".addslashes($data['email'])."' AND `vendor_otp` = '".$data['otp']."' AND `vendor_deleted` = '0' ";			$STH = $DBH->query($sql);			if($STH->rowCount() > 0)			{                                $this->ActivateVendor($data);				$return = true;			}                        else                        {                            $return = false;                        }		} catch (Exception $e) {			$stringData = '[getVendorId] Catch Error:'.$e->getMessage().' , sql:'.$sql;			//$this->debuglog($stringData);            $return = false;        }		        return $return;              }        public function ActivateVendor($data)    {        $my_DBH = new DatabaseHandler();        $DBH = $my_DBH->raw_handle();        $DBH->beginTransaction();        $return = false;				try {			$sql = "UPDATE `tblvendors` SET 					`vendor_status` = :vendor_status					 WHERE `vendor_email` = :vendor_email  ";			$STH = $DBH->prepare($sql);			$STH->execute(array(				':vendor_status' => '1',				':vendor_email' => addslashes($data['email'])			));			$DBH->commit();			$return = true;		} catch (Exception $e) {						return false;		}			        return $return;     }        public function chkValidEmailID($email)    {       $DBH = new DatabaseHandler();	$return = false;	$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".$email."' AND `vendor_status` = '1' ";	$STH = $DBH->query($sql);	if($STH->rowCount() > 0)	{		$return = true;	}	return $return;     }    public function chkMobileExists($mobile){	$DBH = new DatabaseHandler();        $return = false;        $sql = "SELECT contact_number FROM `tblvendorlocations` WHERE `contact_number` = '".$mobile."' AND `vloc_default` = '1' AND `vloc_deleted` = '0' ";        $STH = $DBH->query($sql);        if($STH->rowCount() > 0)		{                    $return = true;                }	        return $return;}public function getVendorIdMobile($mobile)    {        $DBH = new DatabaseHandler();        $vendor_id = 0;        $sql = "SELECT contact_number,vendor_id FROM `tblvendorlocations` WHERE `contact_number` = '".$mobile."' AND `vloc_default` = '1' AND `vloc_deleted` = '0' ";        $STH = $DBH->query($sql);        if($STH->rowCount() > 0)		{                    $r = $STH->fetch(PDO::FETCH_ASSOC);                    $vendor_id = $r['vendor_id'];             }	        return $vendor_id;    }        public function getVendorEmailbyMobile_OLD($mobile)    {        $DBH = new DatabaseHandler();        $vendor_id = 0;        $sql = "SELECT contact_number,contact_email FROM `tblvendorlocations` WHERE `contact_number` = '".$mobile."' AND `vloc_default` = '1' AND `vloc_deleted` = '0' ";        $STH = $DBH->query($sql);        if($STH->rowCount() > 0)		{                    $r = $STH->fetch(PDO::FETCH_ASSOC);                    $vendor_id = $r['contact_email'];             }	        return $vendor_id;    }    //update by ample 02-06-20    public function getVendorEmailbyMobile($mobile)    {        $DBH = new DatabaseHandler();        $vendor_id = 0;        $sql = "SELECT vendor_email FROM `tblvendors` WHERE `vendor_mobile` = '".$mobile."' AND `vendor_status` = '1' ";        $STH = $DBH->query($sql);        if($STH->rowCount() > 0)		{                    $r = $STH->fetch(PDO::FETCH_ASSOC);                    $vendor_id = $r['vendor_email'];             }	        return $vendor_id;    }        public function doVerifyOTPForgotPassword($tdata)    {        $DBH = new DatabaseHandler();        $return = false;		try {			$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".$tdata['email']."' AND `vendor_otp` = '".$tdata['user_otp']."' ";			$STH = $DBH->query($sql);			if( $STH->rowCount() > 0 )			{				$return = true;			}		} catch (Exception $e) {			return false;		}	        return $return;    }        public function resetUserPasswordByMobile($tdata)    {        $my_DBH = new DatabaseHandler();        $DBH = $my_DBH->raw_handle();        $DBH->beginTransaction();        $return = false;        try {			$sql = "UPDATE `tblvendors` SET  					`vendor_password` = :vendor_password,  					`vendor_status` = :vendor_status  					WHERE `vendor_email` = :vendor_email";			$STH = $DBH->prepare($sql);                        $STH->execute(array(				':vendor_password' => md5($tdata['password']),				':vendor_status' => '1',				':vendor_email' => $tdata['email']			));			$DBH->commit();			$return = true;		} catch (Exception $e) {			            return false;        }        return $return;    } //change by ample public function chkVenderEmailExists($email){	$DBH = new DatabaseHandler();	$return = false;	$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".$email."'";	$STH = $DBH->query($sql);        if( $STH->rowCount() > 0 )        {            $return = true;	}	return $return;}public function doValiadteVenderUser($email){	$DBH = new DatabaseHandler();	$return = false;		$sql = "UPDATE `tblvendors` SET `vendor_status` = '1' WHERE `vendor_email` = '".$email."'";	$STH = $DBH->query($sql);        if( $STH->rowCount() > 0 )        {		$return = true;		}	return $return;}public function getVenderUserId($email){	$DBH = new DatabaseHandler();	$contract_id = 0;	$sql = "SELECT * FROM `tblvendors` WHERE `vendor_email` = '".$email."' AND `vendor_status` = '1'";	$STH = $DBH->query($sql);        if( $STH->rowCount() > 0 )        {		$row = $STH->fetch(PDO::FETCH_ASSOC);		$contract_id = $row['vendor_id'];	}	return $contract_id;}public function getVenderUserFullNameById($pro_user_id){	$DBH = new DatabaseHandler();	$return = false;	$name = '';		$sql = "SELECT * FROM `tblvendors` WHERE `vendor_id` = '".$pro_user_id."'";	$STH = $DBH->query($sql);        if( $STH->rowCount() > 0 )        {		$row = $STH->fetch(PDO::FETCH_ASSOC);		$return = true;		$name = stripslashes($row['vendor_name']);	}	return $name;}public function getVenderUserUniqueId($pro_user_id){	$DBH = new DatabaseHandler();	$unique_id = '';	$sql = "SELECT * FROM `tblvendors` WHERE `vendor_id` = '".$pro_user_id."'";	$STH = $DBH->query($sql);        if( $STH->rowCount() > 0 )        {			$row = $STH->fetch(PDO::FETCH_ASSOC);		$unique_id = stripslashes($row['vendor_unique_id']);	}	return $unique_id;}	//ample added this function on 26-10-19 	public function getUserDetailsPro($pro_user_id)	{		$DBH = new DatabaseHandler();		$return = false;                 		$sql = "SELECT * FROM `tblvendors` WHERE `vendor_id` = '".$pro_user_id."'";				$STH = $DBH->query($sql);       if( $STH->rowCount() > 0 ) {            $row = $STH->fetch(PDO::FETCH_ASSOC); 			$return = true;			$name = isset($row['vendor_name']) ? stripslashes($row['vendor_name']) : '';			$email = isset($row['vendor_email']) ? $row['vendor_email'] : '';			$mobile = isset($row['vendor_mobile']) ? stripslashes($row['vendor_mobile']) : '';			$status = isset($row['status']) ? $row['status'] : '';		}		return $row;	}		public function GetUserName_vendor($email) {        $DBH = new DatabaseHandler();        $name = '';        $sql = "select * from `tblvendors` where vendor_email = '" . $email . "'";        $STH = $DBH->query($sql);        if ($STH->rowCount() > 0) {            $row = $STH->fetch(PDO::FETCH_ASSOC);            $name = stripslashes($row['vendor_name']);        }        return $name;    }	//add by ample 02-06-20    public function chkVenderMobileExists($mobile)	{		$DBH = new DatabaseHandler();		$return = false;		$sql = "SELECT * FROM `tblvendors` WHERE `vendor_mobile` = '".$mobile."' AND `vendor_status` = '1'";		$STH = $DBH->query($sql);	        if( $STH->rowCount() > 0 )	        {	            $return = true;		}		return $return;	}	//add by ample 19-06-20	 public function getVendorDetails($vendor_id) {        $DBH = new DatabaseHandler();        $data = array();        $sql = "SELECT * FROM `tblvendors` WHERE `vendor_id` = '" . $vendor_id . "'";        $STH = $DBH->query($sql);        if ($STH->rowCount() > 0) {            $data = $STH->fetch(PDO::FETCH_ASSOC);        }        return $data;    }   //add by ample 22-06-20    public function getVendorContactPersons($vendor_id) {        $DBH = new DatabaseHandler();        $data = array();        $sql = "SELECT * FROM `tblvendorlocations` WHERE `vendor_id` = '" . $vendor_id . "'";        $STH = $DBH->query($sql);        if ($STH->rowCount() > 0) {            while ($row = $STH->fetch(PDO::FETCH_ASSOC)) {                $data[]= $row;            }        }        return $data;    }}?>